const express = require("express");

const cors = require("cors");

const axios = require("axios");

const usersRouter = require("./routes/api/users");
const propRouter = require("./routes/api/property");

const TelegramBot = require("node-telegram-bot-api");

require("dotenv").config();

const { TELEGRAM_BOT_API } = process.env;

const bot = new TelegramBot(TELEGRAM_BOT_API, {
  polling: true,
});

const userCtrl = require("./controllers/users");
const propertyCtrl = require("./controllers/property");

const { markUpInArray, formatDate } = require("./helpers");

const app = express();

app.use(cors());
app.use(express.json());

app.use("/api/wakeup", (req, res, next) => {
  console.log("Wake Up");
  res.json({ message: true });
});

app.use("/api/users", usersRouter);
app.use("/api/prop", propRouter);

app.use((req, res) => {
  res.status(404).json({ message: "Not found" });
});

app.use((err, req, res, next) => {
  const { status = 500, message } = err;
  console.log(err);
  res.status(status).json({ message });
});

// TELEGRAM BOT
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_API}`;
const URI = `/webhook/${TELEGRAM_BOT_API}`;
const webhookURL = `${"https://hata-telegrambot.onrender.com"}${URI}`;

const setupWebhook = async () => {
  try {
    const { data } = await axios.get(
      `${TELEGRAM_API}/setWebhook?url=${webhookURL}&drop_pending_updates=true`
    );
  } catch (error) {
    return error;
  }
};

const commands = [
  {
    command: "start",
    description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞",
  },
];
bot.setMyCommands(commands);

const userCallbackData = {};
bot.on("callback_query", async (ctx) => {
  try {
    const user = await userCtrl.getUserByChatId(ctx.message.chat.id);

    if (ctx.data === "mainPage") {
      await bot.sendMessage(
        ctx.message.chat.id,
        `–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —è–∫–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å.`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: "‚ö°Ô∏è –°–≤—ñ—Ç–ª–æ", callback_data: "electricPage" },
                { text: "üì¢ –ù–æ–≤–∏–Ω–∏", callback_data: "newsPage" },
              ],
              [
                { text: "üë§ –ú–æ—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data: "personPage" },
                { text: "üò™ –ë–æ—Ä–∂–Ω–∏–∫–∏", callback_data: "debtorPage" },
              ],
              [{ text: "üôã‚Äç‚ôÇÔ∏è –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è", callback_data: "pollPage" }],

              user.admin && [
                { text: "üë• –í—Å—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏", callback_data: "allCounters" },
              ],

              [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
            ],
            one_time_keyboard: true,
          },
        }
      );
    }
    if (ctx.data === "allCounters") {
      if (!user.admin) {
        await bot.sendMessage(ctx.message.chat.id, "", {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
            ],
          },
        });
      } else {
        const allProperty = await propertyCtrl.getAllPropertyTelegram();
        const sortedProperty = allProperty.sort((a, b) => {
          const dateA = new Date(
            a.electricData.date.split(".").reverse().join("-")
          );
          const dateB = new Date(
            b.electricData.date.split(".").reverse().join("-")
          );

          return dateB - dateA;
        });
        await bot.sendMessage(
          ctx.message.chat.id,
          "<b>.................. –ü–æ—á–∞—Ç–æ–∫ —Å–ø–∏—Å–∫—É ..................</b>",
          {
            parse_mode: "HTML",
          }
        );

        for (const prop of sortedProperty) {
          const propertyUser = await userCtrl.getUserTelegramById(prop.ownerId);

          await bot.sendMessage(
            ctx.message.chat.id,
            `–Ü–º'—è: ${propertyUser.name
              .split(" ")
              .slice(0, 2)
              .join(" ")}\n–ü–æ–∫–∞–∑–Ω–∏–∫: ${prop.electricData.current} | –î–∞—Ç–∞: ${
              prop.electricData.date
            }\n–î–æ –æ–ø–ª–∞—Ç–∏: ${prop.electricData.forPay}`
          );
        }

        await bot.sendMessage(
          ctx.message.chat.id,
          " <b>.................. –ö—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É ..................</b> ",
          {
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
              ],
            },
          }
        );
      }
    }

    if (ctx.data === "personPage") {
      let message = `–Ü–º—è: ${user.name}\n–í—Å—Ç—É–ø–Ω–∏–π —á–ª–µ–Ω—Å—å–∫–∏–π –≤–Ω–µ—Å–æ–∫: ${
        user.enterFee.isAvailable
          ? `${
              user.enterFee.needToPay > 0
                ? `–¥–æ —Å–ø–ª–∞—Ç–∏ <b><i>${user.enterFee.needToPay}</i></b> –≥—Ä–Ω.`
                : "<b><i>[–û–ø–ª–∞—á–µ–Ω–æ]</i></b>"
            }`
          : "–í—ñ–¥—Å—É—Ç–Ω—ñ–π"
      }\n\n<b>–î—ñ–ª—è–Ω–∫–∏:</b>`;

      for (const [idx, id] of user.owned.entries()) {
        const prop = await propertyCtrl.getPropertyTelegramById(id);

        message += `\n    -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-\n\n–î—ñ–ª—è–Ω–∫–∞ ‚Ññ${
          prop.propertyNumber
        }\n–ü–ª–æ—â–∞: ${prop.area}\n–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä: ${
          prop.kadastrId
        }\n–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: ${prop.ownershipDate}\n–ï–ª–µ–∫—Ç—Ä–∏–∫–∞: ${
          prop.hasElectic
            ? `–ù–∞—è–≤–Ω–∞\n–¢–∞—Ä–∏—Ñ: ${prop.electricTariff} –≥—Ä–Ω.\n–ê–∫—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫: ${prop.electricData[0].current}`
            : `–í—ñ–¥—Å—É—Ç–Ω—è`
        }\n\n<u>–ù–µ –æ–ø–ª–∞—á–µ–Ω—ñ —á–ª–µ–Ω—Å—å–∫—ñ –≤–Ω–µ—Å–∫–∏</u>: ${
          prop.dueArrears &&
          prop.dues
            .filter((item) => item.needPay > 0)
            .map((item) => {
              if (item.needPay > 0) {
                return `\n- ${item.year} —Ä—ñ–∫: <b><i>${item.needPay} –≥—Ä–Ω</i></b>`;
              }
            })
        }\n<u>–ó–∞–≥–∞–ª–æ–º</u>: <b><i>${prop.dueArrears} –≥—Ä–Ω</i></b>.`;
      }
      await bot.sendMessage(ctx.message.chat.id, message, {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
          ],
        },
      });
    }
    if (ctx.data === "electricPage") {
      const markup = [];
      for (const [_, id] of user.owned.entries()) {
        const { propertyNumber } = await propertyCtrl.getPropertyTelegramById(
          id
        );

        markup.push({
          text: `üè° –î—ñ–ª—è–Ω–∫–∞ ‚Ññ${propertyNumber}`,
          callback_data: `properties ${id}`,
        });
      }
      const newMarkUp = markUpInArray(markup);
      await bot.sendMessage(
        ctx.message.chat.id,
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∞–º –¥—ñ–ª—è–Ω–æ–∫, –¥–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —â–æ–¥–æ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó.",
        {
          reply_markup: {
            inline_keyboard: [
              ...newMarkUp,
              [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
            ],
          },
        }
      );
    }
    if (ctx.data.startsWith("properties")) {
      const prop = await propertyCtrl.getPropertyTelegramById(
        ctx.data.split(" ")[1]
      );
      if (!prop.hasElectic) {
        throw new Error(
          `–£ –¥—ñ–ª—è–Ω–∫–∏ ‚Ññ${prop.propertyNumber} –≤—ñ–¥—Å—É—Ç–Ω—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–≤—ñ—Ç–ª–∞.`
        );
      }
      const electricData = prop.electricData[0];
      await bot.sendMessage(
        ctx.message.chat.id,
        `–î—ñ–ª—è–Ω–∫–∞ ‚Ññ${prop.propertyNumber}. \n<u>–ó–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å</u>: <i>${
          electricData?.debt ?? 0
        } –≥—Ä–Ω</i>.\n–ü–æ–∫–∞–∑–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ ${
          electricData
            ? `—Å—Ç–∞–Ω–æ–º –Ω–∞ ${electricData.date}: ${electricData.current}`
            : "–≤—ñ–¥—Å—É—Ç–Ω—ñ"
        }. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é: `,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üìù –ü–æ–¥–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫",
                  callback_data: `pokaz ${prop._id}`,
                },
                {
                  text: "üí∞ –û–ø–ª–∞—Ç–∏—Ç–∏",
                  callback_data: `electricpay ${prop._id}`,
                },
              ],
              [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
            ],
          },
        }
      );
    }
    if (ctx.data.startsWith("pokaz")) {
      const propId = ctx.data.split(" ")[1];
      const prop = await propertyCtrl.getPropertyTelegramById(propId);

      const dateToday = formatDate();
      if (prop.electricData.length > 0) {
        if (
          prop.electricData[0].date.split(".")[1] === dateToday.split(".")[1]
        ) {
          return await bot.sendMessage(
            ctx.message.chat.id,
            `–í–∏ —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –ø–æ–∫–∞–∑–Ω–∏–∫ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è. \n–ê–∫—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ <u><i>${prop.electricData[0].current}</i></u> –±—É–≤ –ø–æ–¥–∞–Ω–∏–π <u><i>${prop.electricData[0].date}</i></u>.\n–ü–æ–∫–∞–∑–Ω–∏–∫ –º–æ–∂–Ω–∞ –±—É–¥–µ –ø–æ–¥–∞—Ç–∏ –∑ –ø–æ—á–∞—Ç–∫—É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è.  \n–Ø–∫—â–æ –≤–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –ø–æ–º–∏–ª–∫—É, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <ins>–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤—É</ins>.`,
            {
              parse_mode: "HTML",
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                      callback_data: `properties ${prop._id}`,
                    },
                    { text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" },
                  ],
                ],
              },
            }
          );
        }
      }
      await bot.sendMessage(
        ctx.message.chat.id,
        "–ü–æ–¥–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞:",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
            ],
          },
        }
      );
      userCallbackData[ctx.message.chat.id] = {
        propId,
      };
    }
    if (ctx.data.startsWith("electricpay")) {
      const prop = await propertyCtrl.getPropertyTelegramById(
        ctx.data.split(" ")[1]
      );
      await bot.sendMessage(
        ctx.message.chat.id,
        "–¶—è –ø–æ—Å–ª—É–≥–∞ –ø–æ–∫–∏ —â–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!",
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `properties ${prop._id}` },
                { text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" },
              ],
            ],
          },
        }
      );
    }
    if (ctx.data === "debtorPage") {
      await bot.sendMessage(
        ctx.message.chat.id,
        "–°–∫–æ—Ä–æ —Ç—É—Ç –ø–æ—è–≤–∏—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ –æ—Å—ñ–±, —è–∫—ñ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —á–ª–µ–Ω—Å—å–∫—ñ –≤–Ω–µ—Å–∫–∏ –∑–∞ 2023 —Ä—ñ–∫ —Ç–∞ —Ä–∞–Ω—ñ—à–µ.",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
            ],
          },
        }
      );
    }
    if (ctx.data === "newsPage") {
      await bot.sendMessage(
        ctx.message.chat.id,
        "üî¥ –ß–ª–µ–Ω—Å—å–∫—ñ –≤–Ω–µ—Å–∫–∏ –∑–∞ 2023 —Ä—ñ–∫.üî¥\n\n–ù–∞–≥–∞–¥—É—î–º–æ –∑–∞ –≤–Ω–µ—Å–∫–∏ –∑ –ª–∏–ø–Ω—è –ø–æ –≥—Ä—É–¥–µ–Ω—å 2023 —Ä–æ–∫—É - 720 –≥—Ä–Ω.\n–î–∞–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è –±—É–ª–æ –ø—Ä–∏–π–Ω—è—Ç–æ –Ω–∞ –∑–±–æ—Ä–∞—Ö –≤ –ª–∏–ø–Ω—ñ 23 —Ä–æ–∫—É. \n\n–û–ø–ª–∞—Ç—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—ñ–º —á–ª–µ–Ω–∞–º –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤—É –û–ë–û–í'–Ø–ó–ö–û–í–û –∑–∞–∫—Ä–∏—Ç–∏. \n–ö–æ—à—Ç–∏ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ –∫–æ–∂–Ω–æ–º—É —ñ–∑ —á–ª–µ–Ω—ñ–≤ –ø—Ä–∞–≤–ª—ñ–Ω–Ω—è. \n–ó –ø–æ–≤–∞–≥–æ—é, –ü—Ä–∞–≤–ª—ñ–Ω–Ω—è –°–ì–ö '–°–¢–ò–ú–£–õ'.",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
            ],
          },
        }
      );
    }
    if (ctx.data === "pollPage") {
      await bot.sendMessage(
        ctx.message.chat.id,
        "–ù–µ–º–∞—î –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –≥–æ–ª–æ—Å—É–≤–∞–Ω—å!",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
            ],
          },
        }
      );
    }
    const emptyKeyboard = { reply_markup: { inline_keyboard: [] } };

    bot.editMessageReplyMarkup(emptyKeyboard, {
      chat_id: ctx.message.chat.id,
      message_id: ctx.message.message_id,
    });
  } catch (error) {
    await bot.sendMessage(ctx.message.chat.id, error.message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
        ],
      },
    });
  }
});

bot.on("text", async (msg) => {
  try {
    if (msg.text == "/start") {
      await bot.sendMessage(
        msg.chat.id,
        `–î–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≤–ª–∞—Å–Ω–∏–∫–∞ –¥—ñ–ª—è–Ω–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º –º–æ–±—ñ–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.`,
        {
          reply_markup: {
            keyboard: [
              [{ text: "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact: true }],
            ],
            one_time_keyboard: true,
            is_persistent: true,
            resize_keyboard: true,
          },
        }
      );
    } else if (msg.text == "/giveid") {
      await bot.sendMessage(msg.chat.id, msg.chat.id);
    } else if (userCallbackData[msg.chat.id]?.userPhone) {
      const phoneNumer = userCallbackData[msg.chat.id].userPhone;
      const findedUser = await userCtrl.getUserTelegramByPhone(phoneNumer);
      if (findedUser.pinCode !== msg.text) {
        throw new Error("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø–∞—Ä–æ–ª—å, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      }

      const updatedUser = await userCtrl.addTelegramChatIdToUser(
        phoneNumer,
        msg.chat.id
      );
      await bot.sendMessage(
        msg.chat.id,
        `${updatedUser.name} —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. \n\n–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
            ],
          },
        }
      );

      delete userCallbackData[msg.chat.id];
    } else if (userCallbackData[msg.chat.id]?.propId) {
      const propertyId = userCallbackData[msg.chat.id].propId;
      const prop = await propertyCtrl.getPropertyTelegramById(propertyId);
      if (prop.electricData.length > 0) {
        if (Number(msg.text) < prop.electricData[0].current) {
          return await bot.sendMessage(
            msg.chat.id,
            "–ü–æ–∫–∞–∑–Ω–∏–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –±—ñ–ª—å—à–∏–º –∑–∞ –º–∏–Ω—É–ª–∏–π. –í–ø–∏—à—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫."
          );
        }
      }
      const electricDataExists = prop.electricData.length > 0;
      const electricData = electricDataExists ? prop.electricData[0] : null;
      const forPay =
        (Number(msg.text) - (electricData?.current || 0)) *
          prop.electricTariff +
        (electricData?.debt || 0);

      await propertyCtrl.addTelegramElecticData(propertyId, [
        {
          date: formatDate(),
          current: Number(msg.text),
          previous: electricDataExists ? electricData.current : 0,
          forPay: forPay,
          paid: 0,
          debt: forPay,
        },
        ...prop.electricData,
      ]);
      await bot.sendMessage(
        msg.chat.id,
        `–ü–æ–∫–∞–∑–Ω–∏–∫ <i>${
          msg.text
        }</i> —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–Ω–∏–π. –ë–æ—Ä–≥ –∑–∞ –º–∏–Ω—É–ª—ñ –º—ñ—Å—è—Ü—ñ: <i>${
          prop.electricData[0]?.debt ?? 0
        }</i>. –î–æ –æ–ø–ª–∞—Ç–∏: <i>${
          (Number(msg.text) -
            ((prop.electricData[0] && prop.electricData[0].current) || 0)) *
            prop.electricTariff +
          (prop.electricData[0]?.debt || 0)
        } –≥—Ä–Ω</i>.`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
            ],
          },
        }
      );

      delete userCallbackData[msg.chat.id];
    } else {
      const user = await userCtrl.getUserByChatId(msg.chat.id);
      if (!user) {
        await bot.sendMessage(
          msg.chat.id,
          "–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ, –±—É–¥—å-–ª–∞—Å–∫–∞ –ø—Ä–æ–π–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é."
        );
      } else {
        await bot.sendMessage(
          msg.chat.id,
          "–Ø –≤–∞—Å –Ω–µ —Ä–æ–∑—É–º—ñ—é. –í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç —ñ–∑ –º–µ–Ω—é:",
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
              ],
            },
          }
        );
      }
    }
  } catch (error) {
    await bot.sendMessage(msg.chat.id, error.message);
  }
});

bot.on("contact", async (contact) => {
  try {
    const userPhone = contact.contact.phone_number.slice(2);
    const findUser = await userCtrl.getUserTelegramByPhone(userPhone);
    if (!findUser) {
      throw new Error(
        "–£ –¥–æ—Å—Ç—É–ø—ñ –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ. –í–∞—à –º–æ–±—ñ–ª—å–Ω–∏–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö."
      );
    }
    userCallbackData[contact.chat.id] = {
      userPhone,
    };
    await bot.sendMessage(
      contact.chat.id,
      "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à PIN –∫–æ–¥, –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ –¥–æ–¥–∞—Ç–∫—É. PIN –∫–æ–¥ –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —É –ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤—É.",
      {
        reply_markup: {
          remove_keyboard: true,
        },
      }
    );
  } catch (error) {
    return await bot.sendMessage(contact.chat.id, error.message);
  }
});

bot.on("polling_error", (err) => console.log(err.response.body));

module.exports = { app };
