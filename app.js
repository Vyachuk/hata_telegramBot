const express = require("express");

const cors = require("cors");

const axios = require("axios");

// const TelegramBot = require("node-telegram-bot-api");

require("dotenv").config();

const { TELEGRAM_BOT_API } = process.env;

// const bot = new TelegramBot(TELEGRAM_BOT_API, {
//   polling: true,
// });

const userCtrl = require("./controllers/users");
const propertyCtrl = require("./controllers/property");

const { markUpInArray, formatDate } = require("./helpers");

const app = express();

app.use(cors());
app.use(express.json());

app.use("/api/wakeup", (req, res, next) => {
  console.log("Wake Up");
  res.json({ message: true });
});

app.use((req, res) => {
  res.status(404).json({ message: "Not found" });
});

app.use((err, req, res, next) => {
  const { status = 500, message } = err;
  res.status(status).json({ message });
});

// TELEGRAM BOT
// const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_API}`;
// const URI = `/webhook/${TELEGRAM_BOT_API}`;
// const webhookURL = `${"https://hata-telegrambot.onrender.com"}${URI}`;

// const setupWebhook = async () => {
//   try {
//     const { data } = await axios.get(
//       `${TELEGRAM_API}/setWebhook?url=${webhookURL}&drop_pending_updates=true`
//     );
//     console.log(data);
//   } catch (error) {
//     return error;
//   }
// };
// const userCallbackData = {};
// bot.on("callback_query", async (ctx) => {
//   try {
//     const user = await userCtrl.getUserByChatId(ctx.message.chat.id);

//     if (ctx.data === "mainPage") {
//       await bot.sendMessage(
//         ctx.message.chat.id,
//         `–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —è–∫–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å.`,
//         {
//           reply_markup: {
//             inline_keyboard: [
//               [
//                 { text: "‚ö°Ô∏è –°–≤—ñ—Ç–ª–æ", callback_data: "electricPage" },
//                 { text: "üì¢ –ù–æ–≤–∏–Ω–∏", callback_data: "newsPage" },
//               ],

//               user.admin
//                 ? [
//                     { text: "üë§ –ú–æ—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data: "personPage" },
//                     { text: "üë• –í—Å—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏", callback_data: "allCounters" },
//                   ]
//                 : [{ text: "üë§ –ú–æ—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data: "personPage" }],
//               [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
//             ],
//             one_time_keyboard: true,
//           },
//         }
//       );
//     }
//     if (ctx.data === "allCounters") {
//       if (!user.admin) {
//         await bot.sendMessage(ctx.message.chat.id, "", {
//           reply_markup: {
//             inline_keyboard: [
//               [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
//             ],
//           },
//         });
//       } else {
//         const allProperty = await propertyCtrl.getAllPropertyTelegram();
//         const sortedProperty = allProperty.sort((a, b) => {
//           const dateA = new Date(
//             a.electricData.date.split(".").reverse().join("-")
//           );
//           const dateB = new Date(
//             b.electricData.date.split(".").reverse().join("-")
//           );

//           return dateB - dateA;
//         });
//         await bot.sendMessage(
//           ctx.message.chat.id,
//           "<b>.................. –ü–æ—á–∞—Ç–æ–∫ —Å–ø–∏—Å–∫—É ..................</b>",
//           {
//             parse_mode: "HTML",
//           }
//         );

//         for (const prop of sortedProperty) {
//           const propertyUser = await userCtrl.getUserTelegramById(prop.ownerId);

//           await bot.sendMessage(
//             ctx.message.chat.id,
//             `–Ü–º'—è: ${propertyUser.name
//               .split(" ")
//               .slice(0, 2)
//               .join(" ")}\n–ü–æ–∫–∞–∑–Ω–∏–∫: ${prop.electricData.current} | –î–∞—Ç–∞: ${
//               prop.electricData.date
//             }\n–î–æ –æ–ø–ª–∞—Ç–∏: ${prop.electricData.forPay}`
//           );
//         }

//         await bot.sendMessage(
//           ctx.message.chat.id,
//           " <b>.................. –ö—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É ..................</b> ",
//           {
//             parse_mode: "HTML",
//             reply_markup: {
//               inline_keyboard: [
//                 [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
//               ],
//             },
//           }
//         );
//       }
//     }
//     if (ctx.data === "newsPage") {
//       await bot.sendMessage(ctx.message.chat.id, "–ù–µ–º–∞—î –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –Ω–æ–≤–∏–Ω!", {
//         reply_markup: {
//           inline_keyboard: [
//             [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
//           ],
//         },
//       });
//     }
//     if (ctx.data === "personPage") {
//       let message = `–Ü–º—è: ${user.name}\n–î—ñ–ª—è–Ω–∫–∏:`;

//       for (const [idx, id] of user.owned.entries()) {
//         const prop = await propertyCtrl.getPropertyTelegramById(id);

//         message += `\n\n–î—ñ–ª—è–Ω–∫–∞ ‚Ññ${prop.propertyNumber}\n–ü–ª–æ—â–∞: ${
//           prop.area
//         }\n–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä: ${prop.kadastrId}\n–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: ${
//           prop.ownershipDate
//         }\n–ï–ª–µ–∫—Ç—Ä–∏–∫–∞: ${
//           prop.hasElectic
//             ? `–ù–∞—è–≤–Ω–∞\n–¢–∞—Ä–∏—Ñ: ${prop.electricTariff} –≥—Ä–Ω.`
//             : `–í—ñ–¥—Å—É—Ç–Ω—è`
//         }\n`;
//       }
//       await bot.sendMessage(ctx.message.chat.id, message, {
//         reply_markup: {
//           inline_keyboard: [
//             [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
//           ],
//         },
//       });
//     }
//     if (ctx.data === "electricPage") {
//       const markup = [];
//       for (const [_, id] of user.owned.entries()) {
//         const { propertyNumber } = await propertyCtrl.getPropertyTelegramById(
//           id
//         );

//         markup.push({
//           text: `üè° –î—ñ–ª—è–Ω–∫–∞ ‚Ññ${propertyNumber}`,
//           callback_data: `properties ${id}`,
//         });
//       }
//       const newMarkUp = markUpInArray(markup);
//       await bot.sendMessage(
//         ctx.message.chat.id,
//         "–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∞–º –¥—ñ–ª—è–Ω–æ–∫, –¥–ª—è –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —â–æ–¥–æ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó.",
//         {
//           reply_markup: {
//             inline_keyboard: [
//               ...newMarkUp,
//               [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
//             ],
//           },
//         }
//       );
//     }
//     if (ctx.data.startsWith("properties")) {
//       const prop = await propertyCtrl.getPropertyTelegramById(
//         ctx.data.split(" ")[1]
//       );
//       if (!prop.hasElectic) {
//         throw new Error(
//           `–£ –¥—ñ–ª—è–Ω–∫–∏ ‚Ññ${prop.propertyNumber} –≤—ñ–¥—Å—É—Ç–Ω—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–≤—ñ—Ç–ª–∞.`
//         );
//       }

//       await bot.sendMessage(
//         ctx.message.chat.id,
//         `–î—ñ–ª—è–Ω–∫–∞ –Ω–æ–º–µ—Ä ${prop.propertyNumber} –ø–æ–∫–∞–∑–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ ${
//           prop.electricData[0]
//             ? `—Å—Ç–∞–Ω–æ–º –Ω–∞ ${prop.electricData[0].date}: ${prop.electricData[0].current}`
//             : "–≤—ñ–¥—Å—É—Ç–Ω—ñ"
//         }. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é: `,
//         {
//           reply_markup: {
//             inline_keyboard: [
//               [
//                 {
//                   text: "üìù –ü–æ–¥–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫",
//                   callback_data: `pokaz ${prop._id}`,
//                 },
//               ],
//               [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
//             ],
//           },
//         }
//       );
//     }
//     if (ctx.data.startsWith("pokaz")) {
//       const propId = ctx.data.split(" ")[1];
//       const prop = await propertyCtrl.getPropertyTelegramById(propId);

//       const dateToday = formatDate();
//       if (prop.electricData.length > 0) {
//         if (
//           prop.electricData[0].date.split(".")[2] === dateToday.split(".")[2]
//         ) {
//           return await bot.sendMessage(
//             ctx.message.chat.id,
//             `–í–∏ —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –ø–æ–∫–∞–∑–Ω–∏–∫ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è. \n–ê–∫—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ <u><i>${prop.electricData[0].current}</i></u> –±—É–≤ –ø–æ–¥–∞–Ω–∏–π <u><i>${prop.electricData[0].date}</i></u>.\n–ü–æ–∫–∞–∑–Ω–∏–∫ –º–æ–∂–Ω–∞ –±—É–¥–µ –ø–æ–¥–∞—Ç–∏ –∑ –ø–æ—á–∞—Ç–∫—É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è.  \n–Ø–∫—â–æ –≤–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –ø–æ–º–∏–ª–∫—É, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <ins>–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤—É</ins>.`,
//             {
//               parse_mode: "HTML",
//               reply_markup: {
//                 inline_keyboard: [
//                   [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
//                 ],
//               },
//             }
//           );
//         }
//       }
//       await bot.sendMessage(
//         ctx.message.chat.id,
//         "–ü–æ–¥–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞:",
//         {
//           reply_markup: {
//             inline_keyboard: [
//               [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
//             ],
//           },
//         }
//       );
//       userCallbackData[ctx.message.chat.id] = {
//         propId,
//       };
//     }
//     const emptyKeyboard = { reply_markup: { inline_keyboard: [] } };

//     bot.editMessageReplyMarkup(emptyKeyboard, {
//       chat_id: ctx.message.chat.id,
//       message_id: ctx.message.message_id,
//     });
//   } catch (error) {
//     await bot.sendMessage(ctx.message.chat.id, error.message, {
//       reply_markup: {
//         inline_keyboard: [
//           [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
//         ],
//       },
//     });
//   }
// });

// bot.on("text", async (msg) => {
//   try {
//     if (msg.text == "/start") {
//       await bot.sendMessage(
//         msg.chat.id,
//         `–î–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≤–ª–∞—Å–Ω–∏–∫–∞ –¥—ñ–ª—è–Ω–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º –º–æ–±—ñ–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.`,
//         {
//           reply_markup: {
//             keyboard: [
//               [{ text: "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact: true }],
//             ],
//             one_time_keyboard: true,
//             is_persistent: true,
//             resize_keyboard: true,
//           },
//         }
//       );
//     } else if (msg.text == "/giveid") {
//       await bot.sendMessage(msg.chat.id, msg.chat.id);
//     } else if (userCallbackData[msg.chat.id]) {
//       const propertyId = userCallbackData[msg.chat.id].propId;
//       const prop = await propertyCtrl.getPropertyTelegramById(propertyId);
//       if (prop.electricData.length > 0) {
//         if (Number(msg.text) < prop.electricData[0].current) {
//           return await bot.sendMessage(
//             msg.chat.id,
//             "–ü–æ–∫–∞–∑–Ω–∏–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –±—ñ–ª—å—à–∏–º –∑–∞ –º–∏–Ω—É–ª–∏–π. –í–ø–∏—à—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫."
//           );
//         }
//       }

//       await propertyCtrl.addTelegramElecticData(propertyId, [
//         {
//           date: formatDate(),
//           current: Number(msg.text),
//           previous:
//             prop.electricData.length > 0 ? prop.electricData[0].current : 0,
//           forPay:
//             (Number(msg.text) -
//               ((prop.electricData[0] && prop.electricData[0].current) || 0)) *
//             prop.electricTariff,
//         },
//         ...prop.electricData,
//       ]);
//       await bot.sendMessage(
//         msg.chat.id,
//         `–ü–æ–∫–∞–∑–Ω–∏–∫ ${msg.text} —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–Ω–∏–π. –î–æ –æ–ø–ª–∞—Ç–∏: ${
//           (Number(msg.text) -
//             ((prop.electricData[0] && prop.electricData[0].current) || 0)) *
//           prop.electricTariff
//         } –≥—Ä–Ω`,
//         {
//           reply_markup: {
//             inline_keyboard: [
//               [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
//             ],
//           },
//         }
//       );

//       delete userCallbackData[msg.chat.id];
//     } else {
//       await bot.sendMessage(
//         msg.chat.id,
//         "–Ø –≤–∞—Å –Ω–µ —Ä–æ–∑—É–º—ñ—é. –í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç —ñ–∑ –º–µ–Ω—é:",
//         {
//           reply_markup: {
//             inline_keyboard: [
//               [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
//             ],
//           },
//         }
//       );
//     }
//   } catch (error) {
//     console.log(error);
//   }
// });

// bot.on("contact", async (contact) => {
//   try {
//     const userPhone = contact.contact.phone_number.slice(2);
//     const findedUser = await userCtrl.addTelegramChatIdToUser(
//       userPhone,
//       contact.chat.id
//     );
//     await bot.sendMessage(
//       contact.chat.id,
//       `${findedUser.name} —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. \n\n–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É`,
//       {
//         reply_markup: {
//           inline_keyboard: [
//             [{ text: "üè™ –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data: "mainPage" }],
//           ],
//         },
//       }
//     );
//   } catch (error) {
//     return await bot.sendMessage(
//       contact.chat.id,
//       "–£ –¥–æ—Å—Ç—É–ø—ñ –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ. –í–∞—à –º–æ–±—ñ–ª—å–Ω–∏–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö."
//     );
//   }
// });

// bot.on("polling_error", (err) => console.log(err.response.body));

module.exports = { app };
